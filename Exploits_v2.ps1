#################################################################################
# Exploits.ps1 v.2                                                              #
#                                                                               #
#  EXPLOITS.PS1 is intended to generate IOEs by creating deviant objects in AD  #
#                                                                               #
#                     WRITTEN BY: Darryl G. Baker, CISSP, CEH                   #
#                                     for                                       #
#                  Tenable.ad Module to execute exploits in labs                #
#################################################################################




#Changes kerb delegation on random computer
function Delegate-Unconstrained{
    Get-ADComputer -Filter * | Get-Random -Count 1 | Set-ADAccountControl -TrustedForDelegation $true
    }

#adds SPN to random user
function Kerberoast-Prepare{
    $svc = -join((65..90) + (97..122) | Get-Random -Count 4 | %{[char]$_})
    $aduser = Get-ADUser -Filter {(sAMAccountName -ne "dcadmin") -or (sAMAccountName -ne "dcuser") -or (sAMAccountName -ne "alsid")} | Get-Random -Count 1 | select samaccountname 
    Set-ADUser -Identity $aduser -ServicePrincipalNames @{Add="$svc/tools-vm.alsid.corp:1433"} 
    Add-ADGroupMember -Identity "Domain Admins" -Members $aduser
    Write-Host "$aduser account is now vulnerable to Kerberoasting"
    }


#Give Standard user Full control of GPO
function Delegate-GPO{
    new-gpo -name TestGPO -ErrorAction SilentlyContinue
    New-GPLink -Name "TestGPO" -Target "dc=alsid,dc=corp" -ErrorAction SilentlyContinue 
    $user = Get-ADUser -Filter * | Get-Random -Count 1 | select samaccountname
    Set-GPPermission -Name TestGPO -TargetName $user.samaccountname -TargetType User -PermissionLevel GpoEditDeleteModifySecurity
    Write-Host "TestGPO delegated to $user"
    }


#Change Permissions to folder in SysVol
function Break-SysvolPermissions{
    $zpath = "C:\SYSVOL\sysvol\alsid.corp\Policies"
    $zuser =  Get-ADUser -Filter {(sAMAccountName -ne "dcadmin") -or (sAMAccountName -ne "dcuser") -or (sAMAccountName -ne "alsid")} | Get-Random -Count 1 | select samaccountname
    $Acl = Get-Acl $zpath
    $Ar = New-Object System.Security.AccessControl.FileSystemAccessRule($zuser.samaccountname, "FullControl","Allow")
    $Acl.SetAccessRule($Ar)
    Set-Acl $zpath $Acl
    Write-Host "Bad Sysvol permissions assigned to $zuser"
    }

#Disable Kerberos Preauth
function ASREPRoast-Prepare{
        $asrepuser = Get-ADUser -Filter {(sAMAccountName -ne "dcadmin") -or (sAMAccountName -ne "dcuser") -or (sAMAccountName -ne "alsid")} | Get-Random -Count 1 | select samaccountname
        Set-ADAccountControl -Identity $asrepuser.samaccountname -DoesNotRequirePreAuth 1
        Write-Host "$asrepuser is now vulnerable to AS-REPRoasting "
        }

#Add user to Privileged group
function Elevate-User{
    $privgroups = ("Domain Admins","Enterprise Admins","Schema Admins","Administrators", "Print Operators")
    $eluser = Get-ADUser -Filter {(sAMAccountName -ne "dcadmin") -or (sAMAccountName -ne "dcuser") -or (sAMAccountName -ne "alsid")} | Get-Random -Count 1 | select samaccountname
    $elgroup = $privgroups | Get-Random -Count 1
    Add-ADGroupMember -Identity $elgroup -Members $eluser
    Write-Host "$eluser has been added to the $elgroup group"
    }

#Place password in description  field
function Password-InDescription{
    for ($i=1; $i -le (Get-Random -Maximum 6); $i=$i+1 ) {
        $randomuser = Get-ADUser -Filter {(sAMAccountName -ne "dcadmin") -or (sAMAccountName -ne "dcuser") -or (sAMAccountName -ne "alsid")} | Get-Random -Count 1 | select samaccountname
        $password = ([System.Web.Security.Membership]::GeneratePassword(12,2))
        Set-AdAccountPassword -Identity $randomuser.samaccountname -Reset -NewPassword (ConvertTo-SecureString $password -AsPlainText -Force)
        Set-ADUser $randomuser.samaccountname -Description "need to be changed $password"
        Write-Host "Password in Description : $randomuser"
    }
}
function Spray-Password{
    Get-ADUser -Filter {(sAMAccountName -ne "dcadmin") -or (sAMAccountName -ne "dcuser") -or (sAMAccountName -ne "alsid")} | select samaccountname | %{
        $password ='PP@@S%w0rd!!'
        $username = $_.samaccountname

        (New-Object DirectoryServices.DirectoryEntry "",$username,$password).psbase.name -ne $null
    }
}

Delegate-Unconstrained
Kerberoast-Prepare
Delegate-GPO
Break-SysvolPermissions
ASREPRoast-Prepare
Elevate-User
Password-InDescription
Spray-Password

# SIG # Begin signature block
# MIIFlAYJKoZIhvcNAQcCoIIFhTCCBYECAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUE4SPdDLcg0Cf7zLyaBeCxLTG
# gSCgggMiMIIDHjCCAgagAwIBAgIQO+B/uXgs+ZJDI4pFwa7Z0DANBgkqhkiG9w0B
# AQsFADAnMSUwIwYDVQQDDBxEYXJyeWwgRy4gQmFrZXIgQ29kZSBTaWduaW5nMB4X
# DTIxMDgxODE5NTcwMloXDTIyMDgxODIwMTcwMlowJzElMCMGA1UEAwwcRGFycnls
# IEcuIEJha2VyIENvZGUgU2lnbmluZzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC
# AQoCggEBAKG7SowGauN0KCzcvXbxj5N9w6JrBU7OG3CqEh/5wCxvJ1CLAMIVa3lL
# +VqXxGS5iX/DbGt3NbvtCDcnu4OCCWDQkqM83NTZP84cD30O9JQblnxIwV1KLjXf
# p96NrOmAuhHHAbRITUxF5+dGZFfpJVp8Gi09GJf+DaEqSCzxu2Qw+g6NW9CWPRW0
# x0HGua95OcNHhNHOJLTTBg1ohtmo82mo5vMuniHIzM5j0sRqxj9vnNwQvTmgC/yq
# rRb3/u9XuPfGBnyR9mNw5po+MwOYenxShZgVv/UekL+oxBnt17r5TrUQfvWfKT7l
# i6pJ5+3Lose2Ave0ZVi4niNdzUi38mUCAwEAAaNGMEQwDgYDVR0PAQH/BAQDAgeA
# MBMGA1UdJQQMMAoGCCsGAQUFBwMDMB0GA1UdDgQWBBSd+ISqqC2sU6pmoZKlYLvJ
# 5a3vgDANBgkqhkiG9w0BAQsFAAOCAQEAY0P3VKNfGMKr+dqlEKjP8Ab95GZ++DZv
# yl4LmoCg0SLsgPoOgDzaaVkCu/OYSsScY9lkZqUO4T37hqdJpiI7FHi7hWWdGJFH
# /x/sQFJwUwuF4zJCCBv33YfJtrs42upbN1xSb3yUof61RTMhe2ZBp8DbfiPhsHI/
# +VZBqWy3FTUTj7XUng09B3gEv55mwEgPaGbUktAOK6fV8AVPtEksHqMllmcjLCeL
# nA6miV7eu+JGCNX/AO6Cvz2BIYMday06B1uVAMu+4NAI7A0kbmPJ7vZ2nXoCqN/y
# 1UrpGuO3EnXLsjYq5skJdNVmmFBTnlpMeM3a0e2I2fvYIkQ0m63CvjGCAdwwggHY
# AgEBMDswJzElMCMGA1UEAwwcRGFycnlsIEcuIEJha2VyIENvZGUgU2lnbmluZwIQ
# O+B/uXgs+ZJDI4pFwa7Z0DAJBgUrDgMCGgUAoHgwGAYKKwYBBAGCNwIBDDEKMAig
# AoAAoQKAADAZBgkqhkiG9w0BCQMxDAYKKwYBBAGCNwIBBDAcBgorBgEEAYI3AgEL
# MQ4wDAYKKwYBBAGCNwIBFTAjBgkqhkiG9w0BCQQxFgQUR3VtWm8JHokTULUJyNVS
# uPltzqYwDQYJKoZIhvcNAQEBBQAEggEAcHrZbypowN/okVIdMyyLmpmRDU7s+ndZ
# UxLy+4bTjTnUkfIvzO0d0Baf+lfwip48x52PFKY/S/JBKbDarj5FM/MDf35xQ7mU
# rK5jyZ4A5byXf1UdSORj5oYEWozMNmkSHsERPOXB4m/naX3EXJhZ0Gd+dHMLFlCq
# Z55sAbxCfgYnyUP/cdVcAaLHe11nsqhqqRHqBFpmEbHuFGzxkbA6FI2dml7ZFtom
# GmyW07hLHdIKI26H04Rey6k1JnpuNSjXtWA7//LCMdr1XI90+1yGiS0JEZFRQDHW
# YPk2uZ/ylpLzFhg+A+m601X6oQyiAk6LdVoUglF186ayXYczs5BC6A==
# SIG # End signature block
